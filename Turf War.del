import 'settings.lobby';
import 'President.del';

globalvar define timer;
globalvar define scoreDelta = 0;
globalvar Barrier[] barriers = [];
playervar define numberOfBarriers = 0;
playervar define timeSinceAlive;
playervar Barrier lookingAtBarrier;
playervar define barrierColorLerp;

define eventPlayer: EventPlayer();
define victim: Victim();
define attacker: Attacker();
globalvar define arenaPosition = 0;
globalvar define scoreToWin = WorkshopSettingInteger('Game', 'Score To Win', 15, 3, 30, 0);
globalvar define gametype = WorkshopSettingCombo('Game', 'Game type', 0, ['Classic', 'Protect the president'], 1);
globalvar define ptpBarrierStartCount = WorkshopSettingInteger('Game', 'Protect the president; Barrier start count', 4, 0, 6, 2);
globalvar define timeUntilSuddenDeath = WorkshopSettingInteger('Sudden Death', 'Time until sudden death', 300, 0, 900, 0);
globalvar define suddenDeathType = WorkshopSettingCombo('Sudden Death', 'Sudden death type', 0, ['Score multiplier', 'Deathmatch'], 1);
globalvar define suddenDeathScoreMultiplier = WorkshopSettingInteger('Sudden Death', 'Overtime score multiplier', 3, 2, 10, 2);
globalvar define respawnTime = WorkshopSettingInteger('Player', 'Respawn time', 4, 0, 10, 0);
globalvar define primaryBarrierDamage = WorkshopSettingInteger('Player', 'Primary fire barrier damage', 10, 0, 60, 1);
globalvar define inSuddenDeath = false;
define timerText: <'<0>:<1>', RoundToInteger(timer / 60, Rounding.Down), timer % 60 < 10 ? <'0<0>', RoundToInteger(timer % 60, Rounding.Down)> : RoundToInteger(timer % 60, Rounding.Down)>;
define colorFlash: SineFromRadians(TotalTimeElapsed() * 1.4) * 255;
define killPoints: inSuddenDeath && suddenDeathType == 0 ? suddenDeathScoreMultiplier : 1;
Color barrierColor: CustomColor(barrierColorFlash(19), barrierColorFlash(191), barrierColorFlash(174), 255);
define barrierColorFlash(define value): value + ((255-value) * barrierColorLerp);

rule: 'Init'
{
    DisableCompletion();
    ChaseVariableAtRate(arenaPosition, scoreDelta * (20 / scoreToWin), 10, RateChaseReevaluation.DestinationAndRate);
    ChaseVariableAtRate(timer, 0, 1, RateChaseReevaluation.None);

    // Create the boundary line.
    // When scoreDelta < 0, the line is Team 2.
    // When scoreDelta == 0, the line is white.
    // When scoreDelta > 0, the line is Team 1.
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam, Vector(-20, 0.1, arenaPosition), Vector(20, 0.1, arenaPosition), scoreDelta == 0 ? Color.White : scoreDelta > 0 ? Team.Team1 : Team.Team2, EffectRev.VisibleToPositionRadiusAndColor);

    CreateHudText(AllPlayers(), Text: "Press interact to create a barrier.", Location: Location.Left, SortOrder: 0, TextColor: Color.Orange);
    CreateHudText(AllPlayers(), Text: "Each kill moves the line towards the enemy side. Push them to the cliff to win.", Location: Location.Left, SortOrder: 1, TextColor: Color.Blue);
    CreateHudText(HostPlayer(), Text: <"CAP <0>/<1>/<2>", ServerLoad(), ServerLoadAverage(), ServerLoadPeak()>, Location: Location.Top, SortOrder: -1, TextColor: Color.Green);

    // Timer
    CreateHudText(
        HostPlayer(),
        Text: inSuddenDeath ? ([<'x<0> score multiplier', suddenDeathScoreMultiplier>, 'Deathmatch: no more respawning'][suddenDeathType]) : timerText,
        TextColor: inSuddenDeath ? CustomColor(255, colorFlash, colorFlash, 255) : Color.White,
        SortOrder: 0,
        Location: Location.Top,
        Reevaluation: HudTextRev.VisibleToStringAndColor
    );

    // Progress bars
    CreateProgressBarHudText(
        AllPlayers(Team.Team1),
        100 * (0.5 + ((scoreDelta / scoreToWin) / 2)),
        <'<0> remaining', Max(0, scoreToWin - scoreDelta)>,
        Location.Top,
        1,
        scoreDelta == 0 ? Color.White : scoreDelta > 0 ? Team.Team1 : Team.Team2,
        scoreDelta >= scoreToWin ? Color.Green : scoreDelta <= -scoreToWin ? Color.Red : Color.White,
        ProgressBarEvaluation.VisibleToValuesAndColor,
        Spectators.VisibleNever
    );
    CreateProgressBarHudText(
        AllPlayers(Team.Team2),
        100 * (0.5 + ((-scoreDelta / scoreToWin) / 2)),
        <'<0> remaining', Max(0, scoreToWin + scoreDelta)>,
        Location.Top,
        1,
        scoreDelta == 0 ? Color.White : scoreDelta > 0 ? Team.Team1 : Team.Team2,
        scoreDelta <= -scoreToWin ? Color.Green : scoreDelta >= scoreToWin ? Color.Red : Color.White,
        ProgressBarEvaluation.VisibleToValuesAndColor,
        Spectators.VisibleNever
    );

    InitializeGame();
}

rule: "Debug: Create dummy bot"
if (IsButtonHeld(HostPlayer(), Button.Melee))
{
    CreateDummyBot(Hero.Mccree, (NumberOfPlayers(Team.Team1) < 6) ? Team.Team1 : Team.Team2, -1, PositionOf(HostPlayer()), FacingDirectionOf(HostPlayer()));
}

// ** Player **
rule: "Player: Setup"
Event.OngoingPlayer
{
    DisableGameModeHud(eventPlayer);
    DisableRespawning(eventPlayer);
    CreateHudText(eventPlayer, Text: 'Number of barriers', TextColor: barrierColor, Location: Location.Top, SortOrder: 3, Reevaluation: HudTextRev.VisibleToStringAndColor);
    CreateHudText(eventPlayer, Text: numberOfBarriers, TextColor: barrierColor, Location: Location.Top, SortOrder: 4, Reevaluation: HudTextRev.VisibleToStringAndColor);

    StartDamageModification(
        FilteredArray(AllPlayers(OppositeTeamOf(TeamOf())), IsUsingUltimate() || (lookingAtBarrier != null && lookingAtBarrier.IsBlockedByBarrier(eventPlayer, ArrayElement()))),
        eventPlayer,
        IsUsingUltimate() ? 0.1 : 0,
        DamageModificationRev.ReceiversDamagersAndDamagePercent
    );
}

rule: "Player: Get target barrier"
Event.OngoingPlayer
if (IsGameInProgress())
{
    lookingAtBarrier = barriers.SortedArray((Barrier barrier) => barrier.Position.DistanceTo(eventPlayer)).FilteredArray((Barrier barrier) => barrier.DoesIntersect(eventPlayer)).First;
    MinWait();
    Loop();
}

rule: "Player: Damage barrier primary fire"
Event.OngoingPlayer
if (IsFiringPrimary())
if (lookingAtBarrier != null)
{
    lookingAtBarrier.Damage(primaryBarrierDamage, eventPlayer);
}

rule: "Player: Damage barrier secondary fire"
Event.OngoingPlayer
Player.Mccree
if (IsFiringSecondary())
if (lookingAtBarrier != null)
if (Ammo(eventPlayer, 0) > 0)
{
    lookingAtBarrier.Damage(Min(15, Max(5, 25 - EyePosition().DistanceTo(lookingAtBarrier.Position) * 2)), eventPlayer);
    Wait(0.11);
    LoopIfConditionIsTrue();
}

rule: "Player: ultimate"
Event.OnDamageDealt
Player.Mccree
if (IsUsingUltimate())
{
    Barrier barrier = barriers
        .SortedArray((Barrier barrier) => barrier.Position.DistanceTo(eventPlayer))
        .FilteredArray((Barrier barrier) => barrier.IsBlockedByBarrier(eventPlayer, victim) && barrier.DoesIntersect(eventPlayer, DirectionTowards(EyePosition(eventPlayer), EyePosition(victim))))
        .First;
    
    if (barrier == null)
        Kill(victim, EventPlayer());
    else
        barrier.Damage(60, null);
}

// ** Score **
rule: "Player: On Kill"
Event.OnFinalBlow
{
    heroUpgradeCurrent++;
    numberOfBarriers++;
    barrierColorLerp = 1;
    StopChasingVariable(barrierColorLerp);
    Wait(0.1);
    ChaseVariableOverTime(barrierColorLerp, 0, 0.4, TimeChaseReevaluation.None);
}

rule: "Game: Team 1 death"
Event.OnDeath
Team.Team1
if (IsGameInProgress())
{
    scoreDelta -= killPoints;
    UpdateScore();
}

rule: "Game: Team 2 death"
Event.OnDeath
Team.Team2
if (IsGameInProgress())
{
    scoreDelta += killPoints;
    UpdateScore();
}

void UpdateScore()
{
    if (scoreDelta < 0)
    {
        SetTeamScore(Team.Team1, 0);
        SetTeamScore(Team.Team2, -scoreDelta);
    }
    else
    {
        SetTeamScore(Team.Team2, 0);
        SetTeamScore(Team.Team1, scoreDelta);
    }
}

rule: "Win: Score"
if (AbsoluteValue(scoreDelta) >= scoreToWin)
{
    Win(scoreDelta > 0 ? Team.Team1 : Team.Team2);
}

rule: "Win: Deathmatch Team 1"
if (inSuddenDeath)
if (suddenDeathType == 1)
if (NumberOfLivingPlayers(Team.Team2) == 0)
{
    Win(Team.Team1);
}

rule: "Win: Deathmatch Team 2"
if (inSuddenDeath)
if (suddenDeathType == 1)
if (NumberOfLivingPlayers(Team.Team1) == 0)
{
    Win(Team.Team2);
}

void Win(Team winner) 'Game: reset'
{
    BigMessage(AllPlayers(winner), "You win!");
    BigMessage(AllPlayers(OppositeTeamOf(winner)), "You lose!");

    Wait(5);

    // Reset the game.
    scoreDelta = 0;
    arenaPosition = 0;
    SetTeamScore(Team.Team1, 0);
    SetTeamScore(Team.Team2, 0);
    inSuddenDeath = false;

    while (CountOf(barriers) > 0)
        barriers[0].Destroy();

    foreach (define player in AllPlayers())
    {
        player.numberOfBarriers = 0;
        RespawnPlayer(player);
        Respawn(player);
    }
    InitializeGame();
}

void InitializeGame() globalvar 'Sudden death: timer'
{
    timer = timeUntilSuddenDeath;
    
    AllPlayers().isPresident = false;
    if (gametype == 1)
    {
        AllPlayers().numberOfBarriers = ptpBarrierStartCount;
        RandomValueInArray(AllPlayers(Team.Team1)).isPresident = true;
        RandomValueInArray(AllPlayers(Team.Team2)).isPresident = true;
    }
}

rule: 'Sudden death: begin'
if (timer <= 0)
{
    inSuddenDeath = true;

    BigMessage(AllPlayers(), 'Sudden death!');
    Wait(1);

    if (suddenDeathType == 0)
        SmallMessage(AllPlayers(), <'Kills are worth x<0> points', suddenDeathScoreMultiplier>);
    else
        SmallMessage(AllPlayers(), 'Deathmatch! No more respawning');
}

// ** Respawning **
rule: "Player Setup Alive"
Event.OngoingPlayer
if (IsAlive())
if (HasSpawned())
{
    RespawnPlayer(eventPlayer);
}

rule: "Respawn"
Event.OngoingPlayer
if (IsDead())
if (!inSuddenDeath || suddenDeathType != 1)
{
    Wait(respawnTime, WaitBehavior.AbortWhenFalse);
    Respawn(eventPlayer);
}

void RespawnPlayer(ref define player)
{
    Teleport(player, Vector(RandomReal(-19, 20), 0, Max(-19, Min(19, scoreDelta - (TeamOf(player) == Team.Team1 ? 20 : -20)))));
    player.timeSinceAlive = TotalTimeElapsed();
}

// ** Barriers **

rule: "Create barrier"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (numberOfBarriers > 0)
{
    numberOfBarriers--;
    ModifyVariable(barriers, Operation.AppendToArray, new Barrier(EyePosition() + FacingDirectionOf() * 3, TeamOf() == Team.Team1));
}

class Barrier
{
    public Vector Position;
    public Team BarrierTeam;
    public define health = barrierHealth;
    public define effectID;
    public define healthEffect;
    static define barrierSize: 1.8;
    static define barrierHealth: 60;

    public Batter(ref Vector pos, ref Team team)
    {
        Position = pos;
        BarrierTeam = team;

        // Create the sphere.
        CreateEffect(AllPlayers(), Effect.Sphere, BarrierTeam == Team.Team1 ? Color.Team1 : Color.Team2, Position, barrierSize, EffectRev.VisibleTo);
        effectID = LastCreatedEntity();

        // Create the health effect.
        CreateEffect(AllPlayers(), Effect.Sphere, Color.Green, (<Barrier>EvaluateOnce(this)).Position, barrierSize*(1/barrierHealth)*(<Barrier>EvaluateOnce(this)).health, EffectRev.VisibleToPositionAndRadius);
        healthEffect = LastCreatedEntity();
    }

    public void Damage(ref define amount, ref define damager)
    {
        //if ((TeamOf(damager) == Team.Team1) == BarrierTeam) return;
        health -= amount;

        if (health <= 0)
        {
            PlayEffect(AllPlayers(), PlayEffect.RingExplosion, BarrierTeam == Team.Team1 ? Color.Team1 : Color.Team2, Position, 5);
            PlayEffect(AllPlayers(), PlayEffect.RingExplosionSound, Color.White, Position, 100);
            Destroy();
        }
        else
        {
            // Play an effect.
            PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.Team2, Position, 100);
        }
    }

    public void Destroy()
    {
        DestroyEffect(effectID);
        DestroyEffect(healthEffect);
        Barrier t = this;
        ModifyVariable(root.barriers, Operation.RemoveFromArrayByValue, t);
        FilteredArray(AllPlayers(), ArrayElement().lookingAtBarrier == t).lookingAtBarrier = null;
        delete t;
    }

    public define DoesIntersect(define player): DoesIntersect(player, FacingDirectionOf(player));
    public define DoesIntersect(define player, Vector direction): DoesLineIntersectSphere(EyePosition(player), direction, Position, barrierSize);
    public define IsBlockedByBarrier(define player, define target): PositionOf(target).DistanceTo(player) > PositionOf(player).DistanceTo(Position);
}

// Boundary
rule: "Team 1: Wrong side"
Event.OngoingPlayer
Team.Team1
if (PositionOf(EventPlayer()).Z > arenaPosition)
if (TotalTimeElapsed() - timeSinceAlive > 1)
{
    ApplyImpulse(EventPlayer(), Vector(0, 0.1, -1), 7, Relative.ToWorld, ContraryMotion.Cancel);
    MinWait();
    LoopIfConditionIsTrue();
}

rule: "Team 2: Wrong side"
Event.OngoingPlayer
Team.Team2
if (ZOf(PositionOf(EventPlayer())) < arenaPosition)
if (TotalTimeElapsed() - timeSinceAlive > 1)
{
    ApplyImpulse(EventPlayer(), Vector(0, 0.1, 1), 7, Relative.ToWorld, ContraryMotion.Cancel);
    MinWait();
    LoopIfConditionIsTrue();
}